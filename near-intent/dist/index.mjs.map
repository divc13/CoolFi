{"version":3,"sources":["../node_modules/tsup/assets/esm_shims.js","../node_modules/js-sha256/src/sha256.js","../src/index.ts","../src/actions/crossChainSwap.ts","../src/utils/deposit.ts","../src/utils/environment.ts","../src/types/deposit.ts","../src/types/tokens.ts","../src/config/tokens.json","../src/types/intents.ts","../src/providers/coingeckoProvider.ts","../src/providers/wallet.ts"],"names":["is224","method","blocks","transactions","utils","crypto","keyStores","connect"],"mappings":"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","file":"index.mjs","sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA256_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw new Error(ERROR);\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var i, type = typeof key;\n    if (type === 'string') {\n      var bytes = [], length = key.length, index = 0, code;\n      for (i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >> 12));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >> 18));\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    } else {\n      if (type === 'object') {\n        if (key === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n          key = new Uint8Array(key);\n        } else if (!Array.isArray(key)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","import { walletProvider } from \"./providers/wallet\";\nimport \"dotenv/config\";\nimport { transferNEAR } from \"./actions/transfer\";\nimport { swapToken } from \"./actions/swap\";\nimport { crossChainSwap, withdrawFromDefuse } from \"./actions/crossChainSwap\";\nimport { CrossChainSwapParams, CrossChainSwapAndWithdrawParams } from \"./types/intents\";\nimport { settings } from \"./utils/environment\";\nimport { getTokenPriceUSD } from \"./providers/coingeckoProvider\";\nimport { WalletProvider } from \"./providers/wallet\";\n\n// (async () => {\n//     const result = await walletProvider.get();\n//     console.log(\"Wallet Provider Response:\", result);\n\n//     const cross_chain_params : CrossChainSwapParams = {\n//         exact_amount_in: \"0.01\",\n//         defuse_asset_identifier_in: \"NEAR\",\n//         defuse_asset_identifier_out: \"BTC\",\n//         network: \"near\"\n//     };\n\n//     const cross_chain_withdraw_params : CrossChainSwapAndWithdrawParams = {\n//         exact_amount_in: \"0.01\",\n//         defuse_asset_identifier_in: \"\",\n//         defuse_asset_identifier_out: \"NEAR\",\n//         destination_address: settings.accountId,\n//         network: \"near\"\n//     };\n\n//     console.log(await crossChainSwap(cross_chain_params));\n//     // console.log(await withdrawFromDefuse(cross_chain_withdraw_params));\n\n//     // console.log(await getCoinIds());\n//     // console.log(await getTokenPriceUSD(\"ethereum\"));\n\n\n//     // console.log(await swapToken(\"wrap.testnet\", \"ref.fakes.testnet\", \"0.1\"));\n//     // console.log(await transferNEAR(\"law1912.testnet\", \"1\"));\n// })();\n\n\nexport { crossChainSwap, withdrawFromDefuse, WalletProvider };","import { connect, Near } from \"near-api-js\";\nimport { KeyPairString } from \"near-api-js/lib/utils/key_pair\";\nimport { utils } from \"near-api-js\";\nimport { keyStores } from \"near-api-js\";\nimport { createBatchDepositNearNep141Transaction, createBatchDepositNearNativeTransaction, getDepositedBalances,\n    getNearNep141StorageBalance, sendNearTransaction, TokenBalances, FT_DEPOSIT_GAS, FT_TRANSFER_GAS } from \"../utils/deposit\";\nimport * as Borsh from \"@dao-xyz/borsh\";\nimport * as js_sha256 from \"js-sha256\";\nimport crypto from \"crypto\";\nimport { CrossChainSwapParams, createTokenDiffIntent, IntentMessage, IntentStatus,\n     PublishIntentRequest, PublishIntentResponse, QuoteRequest, QuoteResponse,\n     CrossChainSwapAndWithdrawParams, NativeWithdrawIntent} from \"../types/intents\";\nimport { KeyPair } from \"near-api-js\";\nimport { Payload, SignMessageParams } from \"../types/intents\";\nimport { providers } from \"near-api-js\";\nimport { getAllSupportedTokens, getDefuseAssetId, getTokenBySymbol, isTokenSupported, SingleChainToken, UnifiedToken, convertAmountToDecimals } from \"../types/tokens\";\nimport { settings } from \"../utils/environment\";\nimport { getTokenPriceUSD } from \"../providers/coingeckoProvider\";\n\nconst DEFUSE_RPC_URL = \"https://solver-relay-v2.chaindefuser.com/rpc\";\n\nconst POLLING_INTERVAL_MS = 2000; // 2 seconds\nconst MAX_POLLING_TIME_MS = 300000; // 5 minutes\nconst FT_MINIMUM_STORAGE_BALANCE_LARGE = \"1250000000000000000000\";\nconst SWAP_SAFETY_THRESHOLD_PERCENT_ABOVE_1USD = 0.5;\nconst SWAP_SAFETY_THRESHOLD_PERCENT_BELOW_1USD = 10;\nconst SWAP_SAFETY_THRESHOLD_USD = 1;\n\nasync function makeRPCRequest<T>(method: string, params: any[]): Promise<T> {\n    const requestBody = {\n        id: 1,\n        jsonrpc: \"2.0\",\n        method,\n        params,\n    };\n    console.log(\"Making RPC request to:\", DEFUSE_RPC_URL, method);\n    console.log(\"Request body:\", JSON.stringify(requestBody, null, 2));\n\n    const response = await fetch(DEFUSE_RPC_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n        throw new Error(`RPC request failed: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    if (data.error) {\n        throw new Error(`RPC error: ${data.error.message}`);\n    }\n    return data.result;\n}\nexport const getQuote = async (params: QuoteRequest): Promise<QuoteResponse> => {\n    return makeRPCRequest<QuoteResponse>(\"quote\", [params]);\n};\n\nexport const publishIntent = async (params: PublishIntentRequest): Promise<PublishIntentResponse> => {\n    return makeRPCRequest<PublishIntentResponse>(\"publish_intent\", [params]);\n};\n\nexport const getIntentStatus = async (intentHash: string): Promise<IntentStatus> => {\n    return makeRPCRequest<IntentStatus>(\"get_status\", [{\n        intent_hash: intentHash\n    }]);\n};\n\n\nexport const getCurrentBlock = async (): Promise<{ blockHeight: number }> => {\n    try {\n        const networkId = settings.networkId;\n        const nodeUrl = settings.nodeUrl;\n\n        const nearConnection = await connect({\n            networkId,\n            nodeUrl,\n            headers: {}\n        });\n\n        // Get the latest block using finality: 'final' for the most recent finalized block\n        const block = await nearConnection.connection.provider.block({\n            finality: 'final'\n        });\n\n        return {\n            blockHeight: block.header.height\n        };\n    } catch (error) {\n        console.error(\"Error getting current block:\", error);\n        throw error;\n    }\n};\n\n\n// First check the balance of the user, then deposit the tokens if there are any\nexport const depositIntoDefuse = async (tokenIds: string[], amount: bigint, nearConnection: Near) => {\n    const contractId = tokenIds[0].replace('nep141:', '');\n\n    const nep141balance = await getNearNep141StorageBalance({\n        contractId,\n        accountId: settings.accountId\n    });\n\n    // const publicKey = await nearConnection.connection.signer.getPublicKey(settings.accountId, settings.networkId);\n\n    var transaction = null;\n    if(contractId === \"wrap.near\")\n    {\n        transaction = createBatchDepositNearNativeTransaction(contractId, amount, !(nep141balance >= BigInt(FT_MINIMUM_STORAGE_BALANCE_LARGE)), BigInt(FT_MINIMUM_STORAGE_BALANCE_LARGE), amount > 0n, amount);\n    }\n    else\n    {\n        transaction = createBatchDepositNearNep141Transaction(contractId, amount, !(nep141balance >= BigInt(FT_MINIMUM_STORAGE_BALANCE_LARGE)), BigInt(FT_MINIMUM_STORAGE_BALANCE_LARGE));\n    }\n\n    return transaction;\n\n    // for (const tx of transaction) {\n    //     const result = await sendNearTransaction(nearConnection, settings.accountId, publicKey, contractId, tx);\n    //     console.log(\"Transaction result:\", result);\n    // }\n}\n\n\nasync function getBalances(\n    tokens: (UnifiedToken | SingleChainToken)[],\n    nearClient: providers.Provider,\n    network?: string\n): Promise<TokenBalances> {\n\n    const tokenBalances = await getDepositedBalances(\n        settings.accountId || \"\",\n        tokens,\n        nearClient,\n        network\n    );\n    return tokenBalances;\n}\n\nasync function pollIntentStatus(intentHash: string): Promise<IntentStatus> {\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < MAX_POLLING_TIME_MS) {\n        const status = await getIntentStatus(intentHash);\n\n        if (status.status === \"SETTLED\" || status.status === \"NOT_FOUND_OR_NOT_VALID\") {\n            return status;\n        }\n\n        await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL_MS));\n    }\n\n    throw new Error(\"Timeout waiting for intent to settle\");\n}\n\n\nasync function signMessage(keyPair: KeyPair, params: SignMessageParams) {\n    // Check the nonce is a 32bytes array\n    if (params.nonce.byteLength !== 32) {\n        throw Error(\"Expected nonce to be a 32 bytes buffer\");\n    }\n\n    // Create the payload and sign it\n    const payload = new Payload({ tag: 2147484061, message: params.message, nonce: Array.from(params.nonce), recipient: params.recipient});\n    const borshPayload = Borsh.serialize(payload);\n    const hashedPayload = js_sha256.sha256.array(borshPayload)\n    const { signature } = keyPair.sign(Uint8Array.from(hashedPayload))\n\n    return {\n        signature: utils.serialize.base_encode(signature),\n        publicKey: utils.serialize.base_encode(keyPair.getPublicKey().data)\n    };\n}\n\nexport async function crossChainSwap(params: CrossChainSwapParams): Promise<any> {\n\n    const accountId = params.accountId;\n    settings.accountId = accountId;\n    const function_access_key = params.function_access_key;\n    const network = params.network || \"near\";\n    var transactions;\n\n\n    if (!accountId) {\n        throw new Error(\"NEAR_ADDRESS not configured\");\n    }\n\n    console.log(\"Looking up tokens:\", {\n        tokenIn: params.defuse_asset_identifier_in,\n        tokenOut: params.defuse_asset_identifier_out\n    });\n\n    // Get token details\n    const defuseTokenIn = getTokenBySymbol(params.defuse_asset_identifier_in);\n    const defuseTokenOut = getTokenBySymbol(params.defuse_asset_identifier_out);\n\n    console.log(\"Found tokens:\", {\n        defuseTokenIn,\n        defuseTokenOut\n    });\n\n    if (!defuseTokenIn || !defuseTokenOut) {\n        const supportedTokens = getAllSupportedTokens();\n        throw new Error(`Token ${params.defuse_asset_identifier_in} or ${params.defuse_asset_identifier_out} not found. Supported tokens: ${supportedTokens.join(', ')}`);\n    }\n\n    // Convert amount to proper decimals\n    const amountInBigInt = convertAmountToDecimals(params.exact_amount_in, defuseTokenIn);\n\n    // Get defuse asset IDs\n    const defuseAssetIdIn = getDefuseAssetId(defuseTokenIn);\n    const defuseAssetIdOut = getDefuseAssetId(defuseTokenOut, network);\n\n    console.log(\"Defuse asset IDs:\", {\n        defuseAssetIdIn,\n        defuseAssetIdOut\n    });\n\n    // Setup NEAR connection\n    const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n    const keyPair = utils.KeyPair.fromString(function_access_key as KeyPairString);\n    await keyStore.setKey(settings.networkId, settings.accountId, keyPair);\n\n    const nearConnection = await connect({\n        networkId: settings.networkId,\n        keyStore,\n        nodeUrl: settings.nodeUrl,\n    });\n\n    // Check balances\n    const tokenBalanceIn = await getBalances([defuseTokenIn], nearConnection.connection.provider, network);\n    const tokenBalanceOut = await getBalances([defuseTokenOut], nearConnection.connection.provider, network);\n    console.log(\"Token balances:\", tokenBalanceIn, tokenBalanceOut);\n\n    if (tokenBalanceIn[defuseAssetIdIn] != undefined &&\n        tokenBalanceIn[defuseAssetIdIn] < amountInBigInt) {\n        transactions = await depositIntoDefuse([defuseAssetIdIn], amountInBigInt - tokenBalanceIn[defuseAssetIdIn], nearConnection);\n    }\n    // Get quote\n    const quote = await getQuote({\n        defuse_asset_identifier_in: defuseAssetIdIn,\n        defuse_asset_identifier_out: defuseAssetIdOut,\n        exact_amount_in: amountInBigInt.toString(),\n    });\n    console.log(\"Quote:\", quote);\n\n    if (!quote || !Array.isArray(quote) || quote.length === 0) {\n        throw new Error(\"Failed to get quote from Defuse. Response: \" + JSON.stringify(quote));\n    }\n\n\n    var best_quote_index = 0;\n    var max:bigint = 0n;\n    for (let index = 0; index < quote.length; index++) {\n        const element = quote[index];\n        if (BigInt(element.amount_out) > max)\n        {\n            max = BigInt(element.amount_out);\n            best_quote_index = index;\n        }\n    }\n\n    const in_token_decimal:number = defuseTokenIn.decimals;\n    const out_token_decimal:number = defuseTokenOut.decimals;\n\n    const in_usd_price:number = await getTokenPriceUSD(defuseTokenIn.cgId) * Number(quote[best_quote_index].amount_in) / Number(`1${\"0\".repeat(in_token_decimal)}`);\n    const out_usd_price:number = await getTokenPriceUSD(defuseTokenOut.cgId) * Number(quote[best_quote_index].amount_out) / Number(`1${\"0\".repeat(out_token_decimal)}`);\n\n    \n    const loss:number = in_usd_price - out_usd_price;\n    const loss_percent:number = ((Number(loss)) / Number(in_usd_price)) * 100;\n    \n    // console.log(\"IN USD PRICE: \", in_usd_price);\n    // console.log(\"OUT USD PRICE: \", out_usd_price);\n    // console.log(\"LOSS: \", loss);\n    // console.log(\"LOSS_PERCENT: \", loss_percent);\n    // console.log(\"BEST QOUTE INDEX: \", best_quote_index);\n\n\n    if ((loss > SWAP_SAFETY_THRESHOLD_USD && loss_percent > SWAP_SAFETY_THRESHOLD_PERCENT_ABOVE_1USD) || (loss_percent > SWAP_SAFETY_THRESHOLD_PERCENT_BELOW_1USD))\n    {\n        throw new Error(\"Failed to get good quotes from Defuse. We rejected the quotes obtained . Response: \" + JSON.stringify(quote));\n    }\n    \n    const intentMessage: IntentMessage = {\n        signer_id: settings.accountId,\n        deadline: new Date(Date.now() + 300000).toISOString(),\n        intents: [createTokenDiffIntent(\n            quote[best_quote_index].defuse_asset_identifier_in,\n            quote[best_quote_index].defuse_asset_identifier_out,\n            quote[best_quote_index].amount_in,\n            quote[best_quote_index].amount_out\n        )]\n    };\n\n    const messageString = JSON.stringify(intentMessage);\n    const nonce = new Uint8Array(crypto.randomBytes(32));\n    const recipient = \"intents.near\";\n    const { signature, publicKey } = await signMessage(keyPair, {\n        message: messageString,\n        recipient,\n        nonce\n    });\n\n    await ensurePublicKeyRegistered(`ed25519:${publicKey}`);\n\n    const intent = await publishIntent({\n        quote_hashes: [quote[best_quote_index].quote_hash],\n        signed_data: {\n            payload: {\n                message: messageString,\n                nonce: Buffer.from(nonce).toString('base64'),\n                recipient\n            },\n            standard: \"nep413\",\n            signature: `ed25519:${signature}`,\n            public_key: `ed25519:${publicKey}`\n        }\n    });\n\n    if (intent.status === \"OK\") {\n        const finalStatus = await pollIntentStatus(intent.intent_hash);\n        return finalStatus;\n    }\n\n    return intent;\n}\n// const crossChainSwapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\n// Example response:\n// \\`\\`\\`json\n// {\n//             \"defuse_asset_identifier_in\": \"NEAR\",\n//             \"defuse_asset_identifier_out\": \"USDC,\n//             \"exact_amount_in\": \"1000\",\n//             \"quote_id\": \"00000000-0000-0000-0000-000000000000\", // OPTIONAL. default will be generated randomly\n//             \"min_deadline_ms\": \"60000\" // OPTIONAL. default 120_000ms / 2min\n//             \"network\": \"near\"\n//         }\n// \\`\\`\\`\n\n// {{recentMessages}}\n\n// Given the recent messages and wallet information below:\n\n// {{walletInfo}}\n\n// Extract the following information about the requested token swap:\n// - defuse_asset_identifier_in: The input token ID\n// - defuse_asset_identifier_out: The output token ID\n// - exact_amount_in: The amount to swap\n\n// Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\n// \\`\\`\\`json\n// {\n//     \"defuse_asset_identifier_in\": string | null,\n//     \"defuse_asset_identifier_out\": string | null,\n//     \"exact_amount_in\": string | null,\n//     \"network\": string | null\n// }\n// \\`\\`\\``;\n\n\n// export const executeCrossChainSwap: Action = {\n//     name: \"NEAR_CROSS_CHAIN_SWAP\",\n//     description: \"Swap tokens between NEAR and other supported chains\",\n//     similes: [\n//         \"swap NEAR tokens for tokens on other chains\",\n//         \"perform cross-chain token exchange from NEAR\",\n//         \"exchange NEAR tokens across different blockchains\"\n//     ],\n//     examples: [\n//         [\n//             {\n//                 user: \"user1\",\n//                 content: {\n//                     text: \"Swap 10 NEAR for ETH\"\n//                 }\n//             }\n//         ],\n//         [\n//             {\n//                 user: \"user2\",\n//                 content: {\n//                     text: \"Exchange 5 NEAR to USDC on Base\"\n//                 }\n//             }\n//         ],\n//         [\n//             {\n//                 user: \"user3\",\n//                 content: {\n//                     text: \"Swap 100 USDC for NEAR\"\n//                 }\n//             }\n//         ]\n//     ] as ActionExample[][],\n//     validate: async (runtime: IAgentRuntime, message: Memory) => {\n//         console.log(\"Message:\", message);\n//         return true;\n//     },\n//     handler: async (\n//         runtime: IAgentRuntime,\n//         message: Memory,\n//         state: State,\n//         _options: { [key: string]: unknown },\n//         callback?: HandlerCallback\n//     ): Promise<any> => {\n//         if (!state) {\n//             state = await runtime.composeState(message);\n//         }\n\n//         const swapContext = composeContext({\n//             state,\n//             template: crossChainSwapTemplate,\n//         });\n\n//         const response = await generateObjectDeprecated({\n//             runtime,\n//             context: swapContext,\n//             modelClass: ModelClass.LARGE\n//         });\n\n//         console.log(\"Response:\", response);\n//         const responseObject = response as CrossChainSwapParams;\n//         if (!responseObject.defuse_asset_identifier_in || !responseObject.defuse_asset_identifier_out\n//              || !responseObject.exact_amount_in) {\n//             console.log(\"Missing required parameters, skipping swap\");\n\n//             const responseMsg = {\n//                 text: \"I need to have the input token, output token, and amount to perform the swap\",\n//             };\n//             callback?.(responseMsg);\n//             return true;\n//         }\n//         if (!isTokenSupported(responseObject.defuse_asset_identifier_in) ||\n//             !isTokenSupported(responseObject.defuse_asset_identifier_out)) {\n//             console.log(\"Invalid asset identifiers provided\");\n\n//             const responseMsg = {\n//                 text: `Invalid tokens provided. Supported tokens are: ${getAllSupportedTokens().join(', ')}`,\n//             };\n//             callback?.(responseMsg);\n//             return true;\n//         }\n\n//         try {\n//             const intent = await crossChainSwap(runtime, message, state, responseObject);\n//             const txHashes = intent.data?.hash;\n//             const responseMsg = {\n//                 text: `Swap completed successfully! Transaction hashes: ${txHashes}`,\n//             };\n\n//             callback?.(responseMsg);\n//             return true;\n//         } catch (error) {\n//             const responseMsg = {\n//                 text: `Error during cross-chain swap: ${error instanceof Error ? error.message : String(error)}`,\n//             };\n//             callback?.(responseMsg);\n//         }\n//     }\n// } as Action;\n\n\n\n// const crossChainSwapAndWithdrawTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\n// Example response:\n// \\`\\`\\`json\n// {\n//             \"defuse_asset_identifier_in\": \"NEAR\",\n//             \"defuse_asset_identifier_out\": \"USDC,\n//             \"exact_amount_in\": \"1000\",\n//             \"quote_id\": \"00000000-0000-0000-0000-000000000000\", // OPTIONAL. default will be generated randomly\n//             \"min_deadline_ms\": \"60000\", // OPTIONAL. default 120_000ms / 2min\n//             \"destination_address\": \"0x1234567890abcdef\",\n//             \"network\": \"base\"\n//         }\n// \\`\\`\\`\n\n// {{recentMessages}}\n\n// Given the recent messages and wallet information below:\n\n// {{walletInfo}}\n\n// Extract the following information about the requested token swap:\n// - defuse_asset_identifier_in: The input token ID\n// - defuse_asset_identifier_out: The output token ID\n// - exact_amount_in: The amount to swap\n// - destination_address: The address to withdraw to\n\n// Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\n// \\`\\`\\`json\n// {\n//     \"defuse_asset_identifier_in\": string | null,\n//     \"defuse_asset_identifier_out\": string | null,\n//     \"exact_amount_in\": string | null,\n//     \"destination_address\": string | null,\n//     \"network\": string | null\n// }\n// \\`\\`\\``;\n\n\n\n// export const executeCrossChainSwapAndWithdraw: Action = {\n//     name: \"WITHDRAW_NEAR_CROSS_CHAIN_SWAP\",\n//     description: \"Swap tokens between NEAR and other supported chains, then withdraw to a different address on a specific network\",\n//     similes: [\n//         \"swap NEAR tokens for tokens on other chains, then withdraw to an address\",\n//         \"perform cross-chain token exchange from NEAR, then withdraw to an address\",\n//         \"exchange NEAR tokens across different blockchains, then withdraw to an address on a specific network\"\n//     ],\n//     examples: [\n//         [\n//             {\n//                 user: \"user1\",\n//                 content: {\n//                     text: \"Swap 10 NEAR for ETH, then withdraw to an address on Ethereum\"\n//                 }\n//             }\n//         ],\n//         [\n//             {\n//                 user: \"user2\",\n//                 content: {\n//                     text: \"Exchange 5 NEAR to USDC on Base, then withdraw to an address on Base\"\n//                 }\n//             }\n//         ],\n//         [\n//             {\n//                 user: \"user3\",\n//                 content: {\n//                     text: \"Swap 100 USDC for NEAR, then withdraw to an address on Base\"\n//                 }\n//             }\n//         ]\n//     ] as ActionExample[][],\n//     validate: async (runtime: IAgentRuntime, message: Memory) => {\n//         console.log(\"Message:\", message);\n//         return true;\n//     },\n//     handler: async (\n//         runtime: IAgentRuntime,\n//         message: Memory,\n//         state: State,\n//         _options: { [key: string]: unknown },\n//         callback?: HandlerCallback\n//     ): Promise<any> => {\n//         if (!state) {\n//             state = await runtime.composeState(message);\n//         }\n\n//         const swapContextAndWithdraw = composeContext({\n//             state,\n//             template: crossChainSwapAndWithdrawTemplate,\n//         });\n\n//         const response = await generateObjectDeprecated({\n//             runtime,\n//             context: swapContextAndWithdraw,\n//             modelClass: ModelClass.LARGE\n//         });\n\n//         console.log(\"Response CrossChainSwapAndWithdrawParams:\", response);\n//         const responseObject = response as CrossChainSwapAndWithdrawParams;\n\n//         if (!responseObject.defuse_asset_identifier_in || !responseObject.defuse_asset_identifier_out\n//              || !responseObject.exact_amount_in || !responseObject.destination_address) {\n//             console.log(\"Missing required parameters, skipping swap and withdraw\");\n\n//             const responseMsg = {\n//                 text: \"I need to have the input token, output token, amount, and destination address to perform the swap and withdraw\",\n//             };\n//             callback?.(responseMsg);\n//             return true;\n//         }\n\n//         if (!isTokenSupported(responseObject.defuse_asset_identifier_in) ||\n//             !isTokenSupported(responseObject.defuse_asset_identifier_out)) {\n//             console.log(\"Invalid asset identifiers provided\");\n\n//             const responseMsg = {\n//                 text: `Invalid tokens provided. Supported tokens are: ${getAllSupportedTokens().join(', ')}`,\n//             };\n//             callback?.(responseMsg);\n//             return true;\n//         }\n\n//         try {\n//             const intent = await crossChainSwap(runtime, message, state, responseObject);\n//             const withdrawIntent = await withdrawFromDefuse(runtime, message, state, responseObject);\n//             const txHashes = [intent.data?.hash, withdrawIntent.data?.hash].join(\", \");\n//             const responseMsg = {\n//                 text: `Swap completed successfully! Transaction hashes: ${txHashes}`,\n//             };\n\n//             callback?.(responseMsg);\n//             return true;\n//         } catch (error) {\n//             console.error(\"Error during cross-chain swap and withdraw:\", error);\n//             const responseMsg = {\n//                 text: `Error during cross-chain swap and withdraw: ${error instanceof Error ? error.message : String(error)}`,\n//             };\n//             callback?.(responseMsg);\n//         }\n//     }\n// } as Action;\n\n\n// interface RuntimeSettings {\n//     networkId: string;\n//     nodeUrl: string;\n//     accountId: string;\n//     secretKey: string;\n//     defuseContractId: string;\n// }\n\n// function getRuntimeSettings(runtime: IAgentRuntime): RuntimeSettings {\n//     const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n//     if (!accountId) {\n    //         throw new Error(\"NEAR_ADDRESS not configured\");\n    //     }\n    \n    //     const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n    //     if (!secretKey) {\n//         throw new Error(\"NEAR_WALLET_SECRET_KEY not configured\");\n//     }\n\n//     return {\n//         networkId: runtime.getSetting(\"NEAR_NETWORK\") || \"testnet\",\n//         nodeUrl: runtime.getSetting(\"NEAR_RPC_URL\") || \"https://rpc.testnet.near.org\",\n//         accountId: runtime.getSetting(\"NEAR_ADDRESS\") || \"\",\n//         secretKey: runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\") || \"\",\n//         defuseContractId: runtime.getSetting(\"DEFUSE_CONTRACT_ID\") || \"intents.near\"\n//     };\n// }\n\n// /// Returns set of public keys registered for given account\n// fn public_keys_of(&self, account_id: &AccountId) -> HashSet<PublicKey>;\n\nasync function addPublicKeyToIntents(publicKey: string): Promise<void> {\n\n    const keyStore = new keyStores.InMemoryKeyStore();\n    const keyPair = utils.KeyPair.fromString(settings.secretKey as KeyPairString);\n    await keyStore.setKey(settings.networkId, settings.accountId, keyPair);\n\n    const nearConnection = await connect({\n        networkId: settings.networkId,\n        keyStore,\n        nodeUrl: settings.nodeUrl,\n    });\n\n    const account = await nearConnection.account(settings.accountId);\n\n    console.log(\"Adding public key to intents contract:\", publicKey);\n    await account.functionCall({\n        contractId: \"intents.near\",\n        methodName: \"add_public_key\",\n        args: {\n            public_key: publicKey\n        },\n        gas: BigInt(FT_DEPOSIT_GAS),\n        attachedDeposit: BigInt(1)\n    });\n}\n\nasync function getPublicKeysOf(accountId: string): Promise<Set<string>> {\n    const nearConnection = await connect({\n        networkId: settings.networkId,\n        nodeUrl: settings.nodeUrl,\n    });\n\n    const account = await nearConnection.account(accountId);\n    const result = await account.viewFunction({\n        contractId: settings.defuseContractId || \"intents.near\",\n        methodName: \"public_keys_of\",\n        args: { account_id: accountId }\n    });\n\n    return new Set(result);\n}\n\nasync function ensurePublicKeyRegistered(publicKey: string): Promise<void> {\n    const existingKeys = await getPublicKeysOf(settings.accountId);\n    if (!existingKeys.has(publicKey)) {\n        console.log(`Public key ${publicKey} not found, registering...`);\n        await addPublicKeyToIntents(publicKey);\n    } else {\n        console.log(`Public key ${publicKey} already registered`);\n    }\n}\n\n\nexport async function withdrawFromDefuse(params: CrossChainSwapAndWithdrawParams): Promise<any> {\n    try {\n        const keyStore = new keyStores.InMemoryKeyStore();\n        const keyPair = utils.KeyPair.fromString(settings.secretKey as KeyPairString);\n        await keyStore.setKey(settings.networkId, settings.accountId, keyPair);\n\n        const network = params.network || \"near\";\n\n        // Generate nonce using crypto\n        const nonce = new Uint8Array(crypto.randomBytes(32));\n\n        // Get token details and defuse asset ID\n        const token = getTokenBySymbol(params.defuse_asset_identifier_out);\n        console.log(\"Token:\", token);\n        if (!token) {\n            throw new Error(`Token ${params.defuse_asset_identifier_out} not found`);\n        }\n\n        const nearConnection = await connect({\n            networkId: settings.networkId,\n            keyStore,\n            nodeUrl: settings.nodeUrl,\n        });\n\n        // Check balances\n        const tokenBalances = await getBalances([token], nearConnection.connection.provider, network);\n        console.log(\"Token balances:\", tokenBalances);\n\n        const defuseAssetIdentifierOut = getDefuseAssetId(token, network);\n        const defuseAssetOutAddrs = defuseAssetIdentifierOut.replace('nep141:', '');\n\n        const tokenBalance = tokenBalances[defuseAssetIdentifierOut];\n        if (tokenBalance === undefined) {\n            throw new Error(`No balance found for token ${defuseAssetIdentifierOut}`);\n        }\n\n        const amountInBigInt = convertAmountToDecimals(params.exact_amount_in, token);\n\n\n        const nep141balance = await getNearNep141StorageBalance({\n            contractId: defuseAssetOutAddrs,\n            accountId: settings.accountId\n        });\n\n        const storage_deposit: bigint = (nep141balance > BigInt(FT_MINIMUM_STORAGE_BALANCE_LARGE)) ? 0n : BigInt(FT_MINIMUM_STORAGE_BALANCE_LARGE);\n\n        // Create intent message\n        const intentMessage: IntentMessage = {\n            signer_id: settings.accountId,\n            deadline: new Date(Date.now() + 300000).toISOString(), // 5 minutes from now\n            intents: [{\n                intent: \"ft_withdraw\",\n                token: defuseAssetOutAddrs,\n                receiver_id: params.destination_address,\n                amount: amountInBigInt.toString(),\n                memo: \"\",\n                deposit: (storage_deposit).toString()\n            }]\n\n            // intents: [{\n            //     intent: \"native_withdraw\",\n            //     receiver_id: params.destination_address,\n            //     amount: params.exact_amount_in,\n            // }]\n        };\n\n        console.log(\"Intent message:\", intentMessage);\n\n        const messageString = JSON.stringify(intentMessage);\n        const recipient = \"intents.near\";\n        // const recipient = settings.accountId;\n\n        // Sign the message\n        const { signature, publicKey } = await signMessage(keyPair, {\n            message: messageString,\n            recipient,\n            nonce\n        });\n\n        // Ensure public key is registered\n        await ensurePublicKeyRegistered(`ed25519:${publicKey}`);\n\n        // Publish intent\n        const intent = await publishIntent({\n            quote_hashes: [], // Empty for withdrawals\n            signed_data: {\n                payload: {\n                    message: messageString,\n                    nonce: Buffer.from(nonce).toString('base64'),\n                    recipient\n                },\n                standard: \"nep413\",\n                signature: `ed25519:${signature}`,\n                public_key: `ed25519:${publicKey}`\n            }\n        });\n\n        if (intent.status === \"OK\") {\n            const finalStatus = await pollIntentStatus(intent.intent_hash);\n            return finalStatus;\n        }\n\n        return intent;\n    } catch (error) {\n        console.error(\"Error in withdrawFromDefuse:\", error);\n        throw error;\n    }\n}\n","/// Taken from defuse-sdk, will be removed once a proper SDK will be released\n/// https://github.com/defuse-protocol/defuse-sdk/blob/main/src/services/depositService.ts\n\nimport { base64 } from \"@scure/base\"\nimport { settings } from \"../utils/environment\"\nimport { FetchError, ResponseError, type GetNearNep141StorageBalanceBoundsRequest, type GetNearNep141StorageBalanceBoundsResponse, type GetNearNep141StorageBalanceOfRequest, type GetNearNep141StorageBalanceOfResponse, type JSONRPCRequest, type Transaction } from \"../types/deposit\"\nimport  * as near from \"near-api-js\"\nimport { AccessKeyView, CodeResult } from \"near-api-js/lib/providers/provider\"\nimport { Near, transactions } from \"near-api-js\"\nimport { PublicKey } from \"near-api-js/lib/utils\"\nimport { getDefuseAssetId, SingleChainToken, UnifiedToken } from \"../types/tokens\"\nexport const FT_DEPOSIT_GAS = `30${\"0\".repeat(12)}` // 30 TGAS\nexport const FT_TRANSFER_GAS = `50${\"0\".repeat(12)}` // 30 TGAS\nconst BASE_URL = \"https://nearrpc.aurora.dev\"\n\n/**\n * Creates a deposit transaction for NEAR.\n *\n * @param receiverId - The address of the Defuse protocol.\n * @param assetId - The address of the asset being deposited.\n * @param amount - The amount to deposit.\n * @returns An array containing the transaction object.\n *\n * @remarks\n * The `args` object in the returned transaction can be customized:\n * - If `msg` is empty, the asset will be deposited to the caller's address.\n * - To create an intent after deposit, `msg` should be a JSON string with the following structure:\n *   {\n *     \"receiver_id\": \"receiver.near\", // required\n *     \"execute_intents\": [...], // signed intents, optional\n *     \"refund_if_failed\": true // optional, default: false\n *   }\n */\nexport function createBatchDepositNearNep141Transaction(\n  assetAccountId: string,\n  amount: bigint,\n  isStorageDepositRequired: boolean,\n  minStorageBalance: bigint\n): Transaction[\"NEAR\"][] {\n\n  return [\n    {\n      receiverId: assetAccountId,\n      actions: [\n        ...(isStorageDepositRequired\n          ? [\n              transactions.functionCall(\n                \"storage_deposit\",\n                {\n                  account_id: settings.defuseContractId || \"intents.near\",\n                  registration_only: true,\n                },\n                BigInt(FT_DEPOSIT_GAS),\n                minStorageBalance\n              ),\n            ]\n          : []),\n        transactions.functionCall(\n          \"ft_transfer_call\",\n          {\n            receiver_id: settings.defuseContractId || \"intents.near\",\n            amount: amount.toString(),\n            msg: \"\",\n          },\n          BigInt(FT_TRANSFER_GAS),\n          BigInt(1)\n        ),\n      ],\n    },\n  ]\n}\n\nexport const getNearNep141MinStorageBalance = async ({\n    contractId,\n  }: {\n    contractId: string\n  }): Promise<bigint> => {\n    const response = await getNearNep141StorageBalanceBounds({\n      request_type: \"call_function\",\n      method_name: \"storage_balance_bounds\",\n      account_id: contractId,\n      args_base64: base64.encode(new TextEncoder().encode(JSON.stringify({}))),\n      finality: \"optimistic\",\n    })\n  \n    const uint8Array = new Uint8Array(response.result)\n    const decoder = new TextDecoder()\n    const parsed = JSON.parse(decoder.decode(uint8Array))\n    return BigInt(parsed.min)\n  }\n\nexport function createBatchDepositNearNativeTransaction(\n  assetAccountId: string,\n  amount: bigint,\n  isStorageDepositRequired: boolean,\n  minStorageBalance: bigint,\n  isWrapNearRequired: boolean,\n  wrapAmount: bigint\n): Transaction[\"NEAR\"][] {\n  return [\n    {\n      receiverId: assetAccountId,\n      actions: [\n        ...(isWrapNearRequired || isStorageDepositRequired\n          ? [\n              transactions.functionCall(\n                \"near_deposit\",\n                {},\n                BigInt(FT_DEPOSIT_GAS),\n                BigInt(wrapAmount + minStorageBalance)\n              ),\n            ]\n          : []),\n        transactions.functionCall(\n          \"ft_transfer_call\",\n          {\n            receiver_id: settings.defuseContractId || \"intents.near\",\n            amount: amount.toString(),\n            msg: \"\",\n          },\n          BigInt(FT_TRANSFER_GAS),\n          BigInt(1)\n        ),\n      ],\n    },\n  ]\n}\n\nexport type TokenBalances = {\n    [key in string]?: bigint\n}\n\nexport async function getDepositedBalances(\n    accountId: string,\n    tokens: (UnifiedToken | SingleChainToken)[],\n    nearClient: near.providers.Provider,\n    network?: string\n  ): Promise<TokenBalances> {\n    // RPC call\n    // Warning: `CodeResult` is not correct type for `call_function`, but it's closest we have.\n    const networkId = network || \"near\";\n    // Check if the token is of certain type\n    const defuseAssetIds = tokens.map(token => getDefuseAssetId(token, networkId));\n    console.log(\"defuseAssetIds\", defuseAssetIds);\n    const output = await nearClient.query<CodeResult>({\n      request_type: \"call_function\",\n      account_id: settings.defuseContractId || \"intents.near\",\n      method_name: \"mt_batch_balance_of\",\n      args_base64: btoa(\n        JSON.stringify({\n          account_id: accountId,\n          token_ids: defuseAssetIds,\n        })\n      ),\n      finality: \"optimistic\",\n    })\n\n    // Decoding response\n    const uint8Array = new Uint8Array(output.result)\n    const decoder = new TextDecoder()\n    const parsed = JSON.parse(decoder.decode(uint8Array))\n\n    // Validating response\n    assert(\n      Array.isArray(parsed) && parsed.every((a) => typeof a === \"string\"),\n      \"Invalid response\"\n    )\n    assert(parsed.length === defuseAssetIds.length, \"Invalid response\")\n\n\n    // Transforming response\n    const result: TokenBalances = {}\n    for (let i = 0; i < defuseAssetIds.length; i++) {\n      // biome-ignore lint/style/noNonNullAssertion: always within bounds\n      result[defuseAssetIds[i]!] = BigInt(parsed[i])\n    }\n\n    return result\n  }\n\n  export function assert(condition: unknown, msg?: string): asserts condition {\n    if (!condition) {\n      throw new Error(msg)\n    }\n  }\n\n  export async function getNearNep141StorageBalanceOf(\n    params: GetNearNep141StorageBalanceOfRequest[\"params\"][0]\n  ): Promise<GetNearNep141StorageBalanceOfResponse[\"result\"]> {\n    const json = await jsonRPCRequest<GetNearNep141StorageBalanceOfRequest>(\n      \"query\",\n      params\n    )\n    return json.result\n  }\n\n  export async function getNearNep141StorageBalanceBounds(\n    params: GetNearNep141StorageBalanceBoundsRequest[\"params\"][0]\n  ): Promise<GetNearNep141StorageBalanceBoundsResponse[\"result\"]> {\n    const json =\n      await jsonRPCRequest<GetNearNep141StorageBalanceBoundsRequest>(\n        \"query\",\n        params\n      )\n    return json.result\n  }\n\n  export async function jsonRPCRequest<\n  T extends JSONRPCRequest<unknown, unknown>,\n>(method: T[\"method\"], params: T[\"params\"][0]) {\n  const response = await request(`${BASE_URL}`, {\n    id: \"dontcare\",\n    jsonrpc: \"2.0\",\n    method,\n    params: params !== undefined ? params : undefined,\n  })\n  return response.json()\n}\n\nasync function request(url: string, body: unknown): Promise<Response> {\n    let response: Response\n    try {\n      response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n    } catch (err) {\n      throw new FetchError(`The request failed ${err}`)\n    }\n\n    if (response.ok) {\n      return response\n    }\n\n    throw new ResponseError(response, \"Response returned an error code\")\n  }\n\n  export const getNearNep141StorageBalance = async ({\n    contractId,\n    accountId,\n  }: {\n    contractId: string\n    accountId: string\n  }): Promise<bigint> => {\n    try {\n      const args = { account_id: accountId }\n      const argsBase64 = Buffer.from(JSON.stringify(args)).toString(\"base64\")\n\n      const response = await getNearNep141StorageBalanceOf({\n        request_type: \"call_function\",\n        method_name: \"storage_balance_of\",\n        account_id: contractId,\n        args_base64: argsBase64,\n        finality: \"optimistic\",\n      })\n\n      console.log(response);\n\n\n      const uint8Array = new Uint8Array(response.result);\n      const decoder = new TextDecoder();\n\n      const parsed = JSON.parse(decoder.decode(uint8Array));\n      \n      console.log(parsed);\n      \n      return BigInt(parsed?.total || \"0\")\n    } catch (err: unknown) {\n      console.error(\"Error fetching balance:\", err);\n      throw new Error(`Error fetching balance: ${err instanceof Error ? err.message : String(err)}`);\n    }\n  }\n\n  export async function sendNearTransaction(nearClient: Near, sender: string, publicKey: PublicKey, receiver: string, nearTransaction: Transaction[\"NEAR\"]) {\n\n    const block = await nearClient.connection.provider.block({\n        finality: 'final'\n    });\n    const accessKeyResponse: AccessKeyView = await nearClient.connection.provider.query({\n        request_type: \"view_access_key\",\n        finality: \"final\",\n        account_id: sender,\n        public_key: publicKey.toString(),\n      });\n\n    const recentBlockHash = near.utils.serialize.base_decode(\n        block.header.hash\n      );\n\n  const transaction = transactions.createTransaction(\n    sender,\n    publicKey,\n    nearTransaction.receiverId,\n    BigInt(accessKeyResponse.nonce) + BigInt(1),\n    nearTransaction.actions,\n    recentBlockHash\n  );\n  try {\n    const signedTransaction = await near.transactions.signTransaction(transaction, nearClient.connection.signer, sender, nearClient.connection.networkId);\n    // send the signed transaction\n    const result = await nearClient.connection.provider.sendTransaction(signedTransaction[1]);\n    console.log(\"Transaction result:\", result);\n    console.log(\"Transaction status:\", result.status);\n  } catch (err) {\n    console.error(\"Error sending transaction:\", err);\n  }\n  }","interface RuntimeSettings {\n    networkId: string;\n    nodeUrl: string;\n    walletUrl: string;\n    helperUrl: string;\n    explorerUrl: string;\n    accountId: string;\n    secretKey: string;\n    publicKey: string;\n    SLIPPAGE: number;\n    defuseContractId: string;\n    coingeckoUrl: string;\n    coingeckoKey: string;\n}\n\nconst nameToIdMap: Record<string, string> = {};\n\nnameToIdMap[\"ETH\"] = \"ethereum\";\nnameToIdMap[\"BTC\"] = \"bitcoin\";\nnameToIdMap[\"DOGE\"] = \"dogecoin\";\nnameToIdMap[\"PEPE\"] = \"pepe\";\nnameToIdMap[\"NEAR\"] = \"near\";\nnameToIdMap[\"USDC\"] = \"usd-coin\";\nnameToIdMap[\"SHIB\"] = \"shiba-inu\";\n\n\nfunction getRuntimeSettings(): RuntimeSettings {\n    const accountId = process.env.NEAR_ADDRESS;\n    if (!accountId) {\n        throw new Error(\"NEAR_ADDRESS not configured\");\n    }\n\n    const secretKey = process.env.NEAR_WALLET_SECRET_KEY;\n    if (!secretKey) {\n        throw new Error(\"NEAR_WALLET_SECRET_KEY not configured\");\n    }\n\n    return {\n        networkId: process.env.NEAR_NETWORK || \"testnet\",\n        nodeUrl: process.env.NEAR_RPC_URL || `https://rpc.${process.env.NEAR_NETWORK || \"testnet\"}.near.org`,\n        walletUrl: `https://${process.env.NEAR_NETWORK || \"testnet\"}.mynearwallet.com/`,\n        helperUrl: `https://helper.${process.env.NEAR_NETWORK || \"testnet\"}.near.org`,\n        explorerUrl: `https://${process.env.NEAR_NETWORK || \"testnet\"}.nearblocks.io`,\n        accountId: process.env.NEAR_ADDRESS || \"\",\n        secretKey: process.env.NEAR_WALLET_SECRET_KEY || \"\",\n        publicKey: process.env.NEAR_WALLET_PUBLIC_KEY || \"\",\n        SLIPPAGE: process.env.NEAR_SLIPPAGE ? parseInt(process.env.NEAR_SLIPPAGE) : 1,\n        defuseContractId: process.env.DEFUSE_CONTRACT_ID || \"intents.near\",\n        coingeckoUrl: process.env.COINGECKO_API_URL || \"\",\n        coingeckoKey: process.env.COINGECKO_API_KEY || \"\",\n    };\n}\n\nconst settings = getRuntimeSettings();\n\nexport{ settings };","\n\nimport type { Address, Hash } from \"viem\"\nimport type { Action } from \"@near-js/transactions\"\n/// Taken from defuse-sdk, will be removed once a proper SDK will be released\n/// https://github.com/defuse-protocol/defuse-sdk/blob/main/src/types/deposit.ts\nexport type ChainType = \"near\" | \"evm\"\n\nexport type UserInfo = {\n  userAddress?: string\n  chainType?: ChainType\n}\n\nexport type Transaction = {\n  NEAR: SendTransactionNearParams\n  EVM: SendTransactionEVMParams\n}\n\nexport type DepositEvent = {\n  type: string\n  data: unknown\n  error?: string\n}\n\nexport interface SendTransactionNearParams {\n  receiverId: string\n  actions: Array<Action>\n}\n\nexport interface SendTransactionEVMParams {\n  from: Address\n  to: Address\n  chainId: number\n  data: Hash\n  value?: bigint\n  gasPrice?: bigint\n  gas?: bigint\n}\n\nexport type GetNearNep141StorageBalanceOfRequest = JSONRPCRequest<\n  \"query\",\n  {\n    request_type: \"call_function\"\n    account_id: string\n    method_name: \"storage_balance_of\"\n    args_base64: string\n    finality: \"optimistic\"\n  }\n>\n\nexport type GetNearNep141StorageBalanceOfResponse = JSONRPCResponse<{\n  block_hash: string\n  block_height: number\n  logs: []\n  result: number[]\n}>\n\nexport type JSONRPCRequest<Method, Params> = {\n    id: string\n    jsonrpc: \"2.0\"\n    method: Method\n    params: Params[]\n  }\n\n  export type JSONRPCResponse<Result> = {\n    id: string\n    jsonrpc: \"2.0\"\n    result: Result\n  }\n\n  export type GetNearNep141StorageBalanceBoundsRequest = JSONRPCRequest<\n  \"query\",\n  {\n    request_type: \"call_function\"\n    account_id: string\n    method_name: \"storage_balance_bounds\"\n    args_base64: string\n    finality: \"optimistic\"\n  }\n>\n\nexport type GetNearNep141StorageBalanceBoundsResponse = JSONRPCResponse<{\n  block_hash: string\n  block_height: number\n  logs: []\n  result: number[]\n}>\n\nexport class FetchError extends Error {\n    name = \"FetchError\"\n  }\n\nexport  class ResponseError extends Error {\n    name = \"ResponseError\"\n    constructor(\n      public response: Response,\n      msg?: string\n    ) {\n      super(msg)\n    }\n  }","import tokens from '../config/tokens.json';\n\nexport interface TokenAddress {\n    address: string;\n    defuse_asset_id: string;\n    type?: 'native';\n}\n\nexport interface TokenAddresses {\n    [chain: string]: TokenAddress | undefined;\n}\n\nexport interface SingleChainToken {\n    defuseAssetId: string;\n    type?: string;\n    address: string;\n    decimals: number;\n    icon: string;\n    chainIcon: string;\n    chainName: string;\n    symbol: string;\n    cgId: string;\n    name: string;\n}\n\nexport interface UnifiedToken {\n    unifiedAssetId: string;\n    decimals: number;\n    symbol: string;\n    name: string;\n    icon: string;\n    cgId: string;\n    addresses: TokenAddresses;\n}\n\nexport interface TokenConfig {\n    tokens: {\n        mainnet: {\n            unified_tokens: UnifiedToken[];\n            single_chain_tokens: SingleChainToken[];\n        }\n    }\n}\n\n// Import token configuration\nconst tokenConfig = tokens as TokenConfig;\n\n/**\n * Gets the token details for a given symbol\n */\nexport function getTokenBySymbol(symbol: string): UnifiedToken | SingleChainToken | undefined {\n    const upperSymbol = symbol.toUpperCase();\n    console.log(\"Looking for token with symbol:\", upperSymbol);\n\n    // Check unified tokens first\n    const unifiedToken = tokenConfig.tokens.mainnet.unified_tokens.find(\n        token => token.symbol.toUpperCase() === upperSymbol\n    );\n    if (unifiedToken) {\n        return unifiedToken;\n    }\n\n    // Then check single chain tokens\n    return tokenConfig.tokens.mainnet.single_chain_tokens.find(\n        token => token.symbol.toUpperCase() === upperSymbol\n    );\n}\n\n/**\n * Gets the token details for a given Defuse asset ID\n */\nexport function getTokenByDefuseId(defuseId: string): UnifiedToken | SingleChainToken | undefined {\n    // Check unified tokens\n    for (const token of tokenConfig.tokens.mainnet.unified_tokens) {\n        for (const chainToken of Object.values(token.addresses)) {\n            if (chainToken?.defuse_asset_id === defuseId) {\n                return token;\n            }\n        }\n    }\n\n    // Check single chain tokens\n    return tokenConfig.tokens.mainnet.single_chain_tokens.find(token => token.defuseAssetId === defuseId);\n}\n\n/**\n * Gets all supported token symbols\n */\nexport function getAllSupportedTokens(): string[] {\n    const tokens = new Set<string>();\n    tokenConfig.tokens.mainnet.unified_tokens.forEach(token => tokens.add(token.symbol));\n    tokenConfig.tokens.mainnet.single_chain_tokens.forEach(token => tokens.add(token.symbol));\n    return Array.from(tokens);\n}\n\n/**\n * Gets all supported chain names\n */\nexport function getAllSupportedChains(): string[] {\n    const chains = new Set<string>();\n    tokenConfig.tokens.mainnet.unified_tokens.forEach(token => {\n        Object.keys(token.addresses).forEach(chain => chains.add(chain));\n    });\n    tokenConfig.tokens.mainnet.single_chain_tokens.forEach(token => {\n        chains.add(token.chainName);\n    });\n    return Array.from(chains);\n}\n\n/**\n * Gets the defuse asset ID for a token\n * If no chain is specified, defaults to 'near'\n */\nexport function getDefuseAssetId(token: UnifiedToken | SingleChainToken, chain: string = 'near'): string {\n    if (isUnifiedToken(token)) {\n        const chainToken = token.addresses[chain];\n        if (!chainToken) {\n            // If the specified chain is not supported and it's not the default 'near' chain, try 'near'\n            if (chain !== 'near') {\n                const nearToken = token.addresses['near'];\n                if (nearToken) {\n                    console.log(`Chain ${chain} not found for token ${token.symbol}, using NEAR chain instead`);\n                    return nearToken.defuse_asset_id;\n                }\n            }\n            throw new Error(`Chain ${chain} not supported for token ${token.symbol}`);\n        }\n        return chainToken.defuse_asset_id;\n    }\n    return token.defuseAssetId;\n}\n\n/**\n * Type guard to check if a token is a UnifiedToken\n */\nexport function isUnifiedToken(token: UnifiedToken | SingleChainToken): token is UnifiedToken {\n    return 'addresses' in token && 'unifiedAssetId' in token;\n}\n\n/**\n * Type guard to check if a token is a SingleChainToken\n */\nexport function isSingleChainToken(token: UnifiedToken | SingleChainToken): token is SingleChainToken {\n    return 'defuseAssetId' in token && 'chainName' in token;\n}\n\n/**\n * Checks if a token is supported based on its symbol\n */\nexport function isTokenSupported(symbol: string): boolean {\n    const upperSymbol = symbol.toUpperCase();\n    return Boolean(getTokenBySymbol(upperSymbol));\n}\n\n/**\n * Gets the token address for a specific chain\n */\nexport function getTokenAddressForChain(token: UnifiedToken, chain: string): TokenAddress | undefined {\n    if (!isUnifiedToken(token)) {\n        throw new Error('Token is not a unified token');\n    }\n    return token.addresses[chain];\n}\n\n/**\n * Converts a decimal amount string to the correct decimal format for a token\n * @param amount The amount as a decimal string (e.g. \"0.1\")\n * @param token The token to get decimals from\n * @returns The amount as a bigint with proper decimal places\n */\nexport function convertAmountToDecimals(amount: string, token: UnifiedToken | SingleChainToken): bigint {\n    // Convert decimal string (e.g. \"0.1\") to integer with proper decimals\n    const [whole, decimal = \"\"] = amount.split(\".\");\n    const decimals = token.decimals;\n    const trimmedDecimal = decimal.slice(0, decimals).padEnd(decimals, \"0\");\n    const fullAmount = `${whole}${trimmedDecimal}`;\n    return BigInt(fullAmount);\n}\n","{\n  \"tokens\": {\n    \"mainnet\": {\n      \"unified_tokens\": [\n        {\n          \"unifiedAssetId\": \"usdc\",\n          \"decimals\": 6,\n          \"symbol\": \"USDC\",\n          \"name\": \"USD Coin\",\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\",\n          \"cgId\": \"usd-coin\",\n          \"addresses\": {\n            \"ethereum\": {\n              \"address\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n              \"defuse_asset_id\": \"nep141:eth-0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.omft.near\"\n            },\n            \"near\": {\n              \"address\": \"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\",\n              \"defuse_asset_id\": \"nep141:17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\"\n            },\n            \"turbochain\": {\n              \"address\": \"0x368ebb46aca6b8d0787c96b2b20bd3cc3f2c45f7\",\n              \"defuse_asset_id\": \"nep141:17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\"\n            },\n            \"aurora\": {\n              \"address\": \"0x368ebb46aca6b8d0787c96b2b20bd3cc3f2c45f7\",\n              \"defuse_asset_id\": \"nep141:17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\"\n            },\n            \"base\": {\n              \"address\": \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n              \"defuse_asset_id\": \"nep141:base-0x833589fcd6edb6e08f4c7c32d4f71b54bda02913.omft.near\"\n            },\n            \"arbitrum\": {\n              \"address\": \"0xaf88d065e77c8cC2239327C5EDb3A432268e5831\",\n              \"defuse_asset_id\": \"nep141:arb-0xaf88d065e77c8cc2239327c5edb3a432268e5831.omft.near\"\n            },\n            \"solana\": {\n              \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n              \"defuse_asset_id\": \"nep141:sol-5ce3bf3a31af18be40ba30f721101b4341690186.omft.near\"\n            }\n          }\n        },\n        {\n          \"unifiedAssetId\": \"eth\",\n          \"decimals\": 18,\n          \"symbol\": \"ETH\",\n          \"name\": \"ETH\",\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\",\n          \"cgId\": \"ethereum\",\n          \"addresses\": {\n            \"ethereum\": {\n              \"address\": \"native\",\n              \"defuse_asset_id\": \"nep141:eth.omft.near\",\n              \"type\": \"native\"\n            },\n            \"near\": {\n              \"address\": \"aurora\",\n              \"defuse_asset_id\": \"nep141:aurora\"\n            },\n            \"turbochain\": {\n              \"address\": \"0x5a524251df27A25AC6b9964a93E1c23AD692688D\",\n              \"defuse_asset_id\": \"nep141:aurora\"\n            },\n            \"aurora\": {\n              \"address\": \"native\",\n              \"defuse_asset_id\": \"nep141:aurora\",\n              \"type\": \"native\"\n            },\n            \"base\": {\n              \"address\": \"native\",\n              \"defuse_asset_id\": \"nep141:base.omft.near\",\n              \"type\": \"native\"\n            },\n            \"arbitrum\": {\n              \"address\": \"native\",\n              \"defuse_asset_id\": \"nep141:arb.omft.near\",\n              \"type\": \"native\"\n            }\n          }\n        },\n        {\n          \"unifiedAssetId\": \"aurora\",\n          \"decimals\": 18,\n          \"symbol\": \"AURORA\",\n          \"name\": \"Aurora\",\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/14803.png\",\n          \"cgId\": \"auroratoken\",\n          \"addresses\": {\n            \"near\": {\n              \"address\": \"aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near\",\n              \"defuse_asset_id\": \"nep141:aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near\"\n            },\n            \"turbochain\": {\n              \"address\": \"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",\n              \"defuse_asset_id\": \"nep141:aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near\"\n            },\n            \"aurora\": {\n              \"address\": \"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",\n              \"defuse_asset_id\": \"nep141:aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near\"\n            },\n            \"ethereum\": {\n              \"address\": \"0xAaAAAA20D9E0e2461697782ef11675f668207961\",\n              \"defuse_asset_id\": \"nep141:eth-0xaaaaaa20d9e0e2461697782ef11675f668207961.omft.near\"\n            }\n          }\n        },\n        {\n          \"unifiedAssetId\": \"turbo\",\n          \"decimals\": 18,\n          \"symbol\": \"TURBO\",\n          \"name\": \"Turbo\",\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/24911.png\",\n          \"cgId\": \"turbo\",\n          \"addresses\": {\n            \"ethereum\": {\n              \"address\": \"0xA35923162C49cF95e6BF26623385eb431ad920D3\",\n              \"defuse_asset_id\": \"nep141:eth-0xa35923162c49cf95e6bf26623385eb431ad920d3.omft.near\"\n            },\n            \"turbochain\": {\n              \"address\": \"native\",\n              \"defuse_asset_id\": \"nep141:a35923162c49cf95e6bf26623385eb431ad920d3.factory.bridge.near\",\n              \"type\": \"native\"\n            },\n            \"near\": {\n              \"address\": \"a35923162c49cf95e6bf26623385eb431ad920d3.factory.bridge.near\",\n              \"defuse_asset_id\": \"nep141:a35923162c49cf95e6bf26623385eb431ad920d3.factory.bridge.near\"\n            }\n          }\n        }\n      ],\n      \"single_chain_tokens\": [\n        {\n          \"defuseAssetId\": \"nep141:wrap.near\",\n          \"type\": \"native\",\n          \"address\": \"native\",\n          \"decimals\": 24,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1.png\",\n          \"chainIcon\": \"/static/icons/network/near.svg\",\n          \"chainName\": \"near\",\n          \"symbol\": \"NEAR\",\n          \"cgId\": \"near\",\n          \"name\": \"Near\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:btc.omft.near\",\n          \"type\": \"native\",\n          \"address\": \"native\",\n          \"decimals\": 8,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1.png\",\n          \"chainIcon\": \"/static/icons/network/btc.svg\",\n          \"chainName\": \"bitcoin\",\n          \"symbol\": \"BTC\",\n          \"cgId\": \"bitcoin\",\n          \"name\": \"Bitcoin\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:sol.omft.near\",\n          \"type\": \"native\",\n          \"address\": \"native\",\n          \"decimals\": 9,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/5426.png\",\n          \"chainIcon\": \"/static/icons/network/solana.svg\",\n          \"chainName\": \"solana\",\n          \"symbol\": \"SOL\",\n          \"cgId\": \"solana\",\n          \"name\": \"Solana\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:doge.omft.near\",\n          \"type\": \"native\",\n          \"address\": \"native\",\n          \"decimals\": 8,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/74.png\",\n          \"chainIcon\": \"/static/icons/network/dogecoin.svg\",\n          \"chainName\": \"dogecoin\",\n          \"symbol\": \"DOGE\",\n          \"cgId\": \"dogecoin\",\n          \"name\": \"Dogecoin\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:xrp.omft.near\",\n          \"type\": \"native\",\n          \"address\": \"native\",\n          \"decimals\": 6,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/52.png\",\n          \"chainIcon\": \"/static/icons/network/xrpledger.svg\",\n          \"chainName\": \"xrpledger\",\n          \"symbol\": \"XRP\",\n          \"cgId\": \"ripple\",\n          \"name\": \"XRP\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:eth-0x6982508145454ce325ddbe47a25d4ec3d2311933.omft.near\",\n          \"address\": \"0x6982508145454Ce325dDbE47a25d4ec3d2311933\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/24478.png\",\n          \"chainIcon\": \"/static/icons/network/ethereum.svg\",\n          \"chainName\": \"eth\",\n          \"symbol\": \"PEPE\",\n          \"cgId\": \"pepe\",\n          \"name\": \"Pepe\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:eth-0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce.omft.near\",\n          \"address\": \"0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/5994.png\",\n          \"chainIcon\": \"/static/icons/network/ethereum.svg\",\n          \"chainName\": \"eth\",\n          \"symbol\": \"SHIB\",\n          \"cgId\": \"shiba-inu\",\n          \"name\": \"Shiba Inu\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:eth-0x514910771af9ca656af840dff83e8264ecf986ca.omft.near\",\n          \"address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1975.png\",\n          \"chainIcon\": \"/static/icons/network/ethereum.svg\",\n          \"chainName\": \"eth\",\n          \"symbol\": \"LINK\",\n          \"cgId\": \"chainlink\",\n          \"name\": \"Chainlink\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:eth-0x1f9840a85d5af5bf1d1762f925bdaddc4201f984.omft.near\",\n          \"address\": \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/7083.png\",\n          \"chainIcon\": \"/static/icons/network/ethereum.svg\",\n          \"chainName\": \"eth\",\n          \"symbol\": \"UNI\",\n          \"cgId\": \"uniswap\",\n          \"name\": \"Uniswap\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:arb-0x912ce59144191c1204e64559fe8253a0e49e6548.omft.near\",\n          \"address\": \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/11841.png\",\n          \"chainIcon\": \"/static/icons/network/arbitrum.svg\",\n          \"chainName\": \"arbitrum\",\n          \"symbol\": \"ARB\",\n          \"cgId\": \"arbitrum\",\n          \"name\": \"Arbitrum\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:eth-0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9.omft.near\",\n          \"address\": \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/7278.png\",\n          \"chainIcon\": \"/static/icons/network/ethereum.svg\",\n          \"chainName\": \"eth\",\n          \"symbol\": \"AAVE\",\n          \"cgId\": \"aave\",\n          \"name\": \"Aave\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:arb-0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a.omft.near\",\n          \"address\": \"0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/11857.png\",\n          \"chainIcon\": \"/static/icons/network/arbitrum.svg\",\n          \"chainName\": \"arbitrum\",\n          \"symbol\": \"GMX\",\n          \"cgId\": \"gmx\",\n          \"name\": \"GMX\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:eth-0xaaee1a9723aadb7afa2810263653a34ba2c21c7a.omft.near\",\n          \"address\": \"0xaaeE1A9723aaDB7afA2810263653A34bA2C21C7a\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/27659.png\",\n          \"chainIcon\": \"/static/icons/network/ethereum.svg\",\n          \"chainName\": \"eth\",\n          \"symbol\": \"MOG\",\n          \"cgId\": \"mog-coin\",\n          \"name\": \"Mog Coin\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:base-0x532f27101965dd16442e59d40670faf5ebb142e4.omft.near\",\n          \"address\": \"0x532f27101965dd16442E59d40670FaF5eBB142E4\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29743.png\",\n          \"chainIcon\": \"/static/icons/network/base.svg\",\n          \"chainName\": \"base\",\n          \"symbol\": \"BRETT\",\n          \"cgId\": \"brett\",\n          \"name\": \"Brett\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:token.sweat\",\n          \"address\": \"token.sweat\",\n          \"decimals\": 18,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/21351.png\",\n          \"chainIcon\": \"/static/icons/network/near.svg\",\n          \"chainName\": \"near\",\n          \"symbol\": \"SWEAT\",\n          \"cgId\": \"sweatcoin\",\n          \"name\": \"Sweat Economy\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:sol-b9c68f94ec8fd160137af8cdfe5e61cd68e2afba.omft.near\",\n          \"address\": \"EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm\",\n          \"decimals\": 6,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/28752.png\",\n          \"chainIcon\": \"/static/icons/network/solana.svg\",\n          \"chainName\": \"solana\",\n          \"symbol\": \"WIF\",\n          \"cgId\": \"dogwifcoin\",\n          \"name\": \"dogwifhat\"\n        },\n        {\n          \"defuseAssetId\": \"nep141:sol-57d087fd8c460f612f8701f5499ad8b2eec5ab68.omft.near\",\n          \"address\": \"ukHH6c7mMyiWCf1b9pnWe25TSpkDDt3H5pQZgZ74J82\",\n          \"decimals\": 6,\n          \"icon\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29870.png\",\n          \"chainIcon\": \"/static/icons/network/solana.svg\",\n          \"chainName\": \"solana\",\n          \"symbol\": \"BOME\",\n          \"cgId\": \"book-of-meme\",\n          \"name\": \"BOOK OF MEME\"\n        }\n      ]\n    }\n  }\n}\n","import { field, option, fixedArray } from '@dao-xyz/borsh';\n\n\nexport interface SignMessageParams {\n    message: string;\n    recipient: string;\n    nonce: Uint8Array;\n    callbackUrl?: string;\n}\n\nexport class Payload {\n    @field({ type: 'u32' })\n    tag: number; // Always the same tag: 2**31 + 413\n\n    @field({ type: 'string' })\n    message: string; // The same message passed in `SignMessageParams.message`\n\n    @field({ type: fixedArray('u8', 32) })\n    nonce: number[]; // The same nonce passed in `SignMessageParams.nonce`\n\n    @field({ type: 'string' })\n    recipient: string; // The same recipient passed in `SignMessageParams.recipient`\n\n    @field({ type: option('string') })\n    callbackUrl?: string;\n\n    constructor({ message, nonce, recipient }: Payload) {\n        this.tag = 2147484061;\n        this.message = message;\n        this.nonce = nonce;\n        this.recipient = recipient;\n    }\n}\n// Quote Types\nexport interface QuoteRequest {\n    defuse_asset_identifier_in: string;\n    defuse_asset_identifier_out: string;\n    exact_amount_in?: string;\n    exact_amount_out?: string;\n    quote_id?: string;\n    min_deadline_ms?: number;\n}\n\nexport interface Quote {\n    quote_hash: string;\n    defuse_asset_identifier_in: string;\n    defuse_asset_identifier_out: string;\n    amount_in: string;\n    amount_out: string;\n    expiration_time: number;\n}\n\nexport type QuoteResponse = Quote[];\n\n// Intent Types\nexport interface TokenDiffIntent {\n    intent: \"token_diff\";\n    diff: { [key: string]: string };\n}\n\nexport  interface MTBatchTransferIntent {\n    intent: \"mt_batch_transfer\";\n    receiver_id: string;\n    token_id_amounts: { [key: string]: string };\n}\n\nexport interface FTWithdrawIntent {\n    intent: \"ft_withdraw\";\n    token: string;\n    receiver_id: string;\n    amount: string;\n    memo: string;\n    deposit: string;\n}\n\nexport interface NativeWithdrawIntent {\n    intent: \"native_withdraw\";\n    receiver_id: string;\n    amount: string;\n}\n\nexport type Intent = TokenDiffIntent | MTBatchTransferIntent | FTWithdrawIntent | NativeWithdrawIntent;\n\nexport interface IntentMessage {\n    signer_id: string;\n    deadline: string;\n    intents: Intent[];\n}\n\nexport interface SignedData {\n    standard: \"nep413\" | \"erc191\" | \"raw_ed25519\";\n    payload: {\n        message: string;  // JSON stringified IntentMessage\n        nonce: string;\n        recipient: string;\n    };\n    public_key: string;\n    signature: string;\n}\n\nexport interface PublishIntentRequest {\n    quote_hashes: string[];\n    signed_data: SignedData;\n}\n\nexport interface PublishIntentResponse {\n    status: \"OK\" | \"FAILED\";\n    reason?: string;\n    intent_hash: string;\n}\n\nexport interface IntentStatus {\n    intent_hash: string;\n    status: \"PENDING\" | \"TX_BROADCASTED\" | \"SETTLED\" | \"NOT_FOUND_OR_NOT_VALID\";\n    data?: {\n        hash?: string;\n    };\n}\n\n\n// Example usage of creating a token diff intent\nexport const createTokenDiffIntent = (\n    defuse_asset_identifier_in: string,\n    defuse_asset_identifier_out: string,\n    exact_amount_in: string,\n    exact_amount_out: string\n): TokenDiffIntent => {\n    return {\n        intent: \"token_diff\",\n        diff: {\n            [defuse_asset_identifier_out]: exact_amount_out,\n            [defuse_asset_identifier_in]: `-${exact_amount_in}`\n        }\n    };\n};\n\nexport interface CrossChainSwapParams {\n    accountId: string;\n    exact_amount_in: string;\n    defuse_asset_identifier_in: string;\n    defuse_asset_identifier_out: string;\n    function_access_key: string;\n    network?: string;\n}\n\nexport interface CrossChainSwapAndWithdrawParams {\n    exact_amount_in: string;\n    defuse_asset_identifier_in: string;\n    defuse_asset_identifier_out: string;\n    destination_address: string;\n    network?: string;\n}\n","import axios, { type AxiosRequestConfig } from \"axios\"\nimport { settings } from \"../utils/environment\"\n\nconst coingeckoApiKey = settings.coingeckoKey ?? \"\"\nconst appOriginUrl = \"*\"\n\n\n// export const getTokenPriceUSD: bigint = (id: string) => {\n\n//   const config: AxiosRequestConfig = {\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Access-Control-Allow-Origin\": appOriginUrl,\n//       \"x-cg-api-key\": coingeckoApiKey,\n//     },\n//   }\n//   return axios\n//     .get(\n//       `https://api.coingecko.com/api/v3/simple/price?ids=${id}&vs_currencies=usd&precision=full`,\n//       config\n//     )\n//     .then((resp) => BigInt(resp.data?.[id]?.usd) ?? 0n)\n// }\n\n\nexport const getTokenPriceUSD = async (id: string): Promise<number> => {\n    const config: AxiosRequestConfig = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": appOriginUrl,\n        \"x-cg-api-key\": coingeckoApiKey,\n      },\n    };\n  \n    try {\n      const response = await axios.get(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${id}&vs_currencies=usd&precision=full`,\n        config\n      );\n  \n      // Extracting price and converting to BigInt safely\n      const priceStr = response.data?.[id]?.usd ?? \"0\";\n      return Number(priceStr);\n    } catch (error) {\n      console.error(\"Error fetching token price:\", error);\n      return 0;\n    }\n  };\n\n","\nimport { KeyPair, keyStores, connect, Account, utils } from \"near-api-js\";\nimport BigNumber from \"bignumber.js\";\nimport { KeyPairString } from \"near-api-js/lib/utils\";\nimport NodeCache from \"node-cache\";\nimport { settings } from \"../utils/environment\";\n\nconst PROVIDER_CONFIG = {\n    networkId: settings.networkId,\n    nodeUrl:settings.nodeUrl,\n    walletUrl: settings.walletUrl,\n    helperUrl: settings.helperUrl,\n    explorerUrl: settings.explorerUrl,\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    SLIPPAGE: settings.SLIPPAGE,\n};\n\nexport interface NearToken {\n    name: string;\n    symbol: string;\n    decimals: number;\n    balance: string;\n    uiAmount: string;\n    priceUsd: string;\n    valueUsd: string;\n    valueNear?: string;\n}\n\ninterface WalletPortfolio {\n    totalUsd: string;\n    totalNear?: string;\n    tokens: Array<NearToken>;\n}\n\nexport class WalletProvider {\n    private cache: NodeCache;\n    private account: Account | null = null;\n    private keyStore: keyStores.InMemoryKeyStore;\n    constructor(private accountId: string) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // Cache TTL set to 5 minutes\n        this.keyStore = new keyStores.InMemoryKeyStore();\n    }\n\n    async get(): Promise<string | null> {\n        try {\n            return await this.getFormattedPortfolio();\n        } catch (error) {\n            console.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    }\n\n    public async connect() {\n        if (this.account) return this.account;\n\n        const secretKey = settings.secretKey;\n        const publicKey = settings.publicKey;\n\n        console.log(secretKey)\n\n        if (!secretKey || !publicKey) {\n            throw new Error(\"NEAR wallet credentials not configured\");\n        }\n\n        // Create KeyPair from secret key\n        const keyPair = KeyPair.fromString(secretKey as KeyPairString);\n\n        // Set the key in the keystore\n        await this.keyStore.setKey(\n            PROVIDER_CONFIG.networkId,\n            this.accountId,\n            keyPair\n        );\n\n        const nearConnection = await connect({\n            networkId: PROVIDER_CONFIG.networkId,\n            keyStore: this.keyStore,\n            nodeUrl: PROVIDER_CONFIG.nodeUrl,\n            walletUrl: PROVIDER_CONFIG.walletUrl,\n            helperUrl: PROVIDER_CONFIG.helperUrl,\n        });\n\n        this.account = await nearConnection.account(this.accountId);\n        return this.account;\n    }\n\n    private async fetchWithRetry(\n        url: string,\n        options: RequestInit = {}\n    ): Promise<any> {\n        let lastError: Error;\n\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n            try {\n                const response = await fetch(url, options);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return await response.json();\n            } catch (error) {\n                console.error(`Attempt ${i + 1} failed:`, error);\n                lastError = error as Error;\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n                    await new Promise((resolve) =>\n                        setTimeout(\n                            resolve,\n                            PROVIDER_CONFIG.RETRY_DELAY * Math.pow(2, i)\n                        )\n                    );\n                }\n            }\n        }\n        throw lastError!;\n    }\n\n    async fetchPortfolioValue(): Promise<WalletPortfolio> {\n        try {\n            const cacheKey = `portfolio-${this.accountId}`;\n            const cachedValue = this.cache.get<WalletPortfolio>(cacheKey);\n\n            if (cachedValue) {\n                console.log(\"Cache hit for fetchPortfolioValue\");\n                return cachedValue;\n            }\n\n            const account = await this.connect();\n            const balance = await account.getAccountBalance();\n\n            // Convert yoctoNEAR to NEAR\n            const nearBalance = utils.format.formatNearAmount(\n                balance.available\n            );\n\n            // Fetch NEAR price in USD\n            const nearPrice = await this.fetchNearPrice();\n            const valueUsd = new BigNumber(nearBalance).times(nearPrice);\n\n            const portfolio: WalletPortfolio = {\n                totalUsd: valueUsd.toString(),\n                totalNear: nearBalance,\n                tokens: [\n                    {\n                        name: \"NEAR Protocol\",\n                        symbol: \"NEAR\",\n                        decimals: 24,\n                        balance: balance.available,\n                        uiAmount: nearBalance,\n                        priceUsd: nearPrice.toString(),\n                        valueUsd: valueUsd.toString(),\n                    },\n                ],\n            };\n\n            this.cache.set(cacheKey, portfolio);\n            return portfolio;\n        } catch (error) {\n            console.error(\"Error fetching portfolio:\", error);\n            throw error;\n        }\n    }\n\n    private async fetchNearPrice(): Promise<number> {\n        const cacheKey = \"near-price\";\n        const cachedPrice = this.cache.get<number>(cacheKey);\n\n        if (cachedPrice) {\n            return cachedPrice;\n        }\n\n        try {\n            const response = await this.fetchWithRetry(\n                \"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\"\n            );\n            const price = response.near.usd;\n            this.cache.set(cacheKey, price);\n            return price;\n        } catch (error) {\n            console.error(\"Error fetching NEAR price:\", error);\n            return 0;\n        }\n    }\n\n    formatPortfolio(portfolio: WalletPortfolio): string {\n        let output = `NEAR Wallet Portfolio Summary\\n`;\n        output += `Account ID: ${this.accountId}\\n\\n`;\n\n        const totalUsdFormatted = new BigNumber(portfolio.totalUsd).toFixed(2);\n        const totalNearFormatted = portfolio.totalNear;\n\n        output += `Total Value: $${totalUsdFormatted} (${totalNearFormatted} NEAR)\\n\\n`;\n        output += \"Token Balances:\\n\";\n\n        for (const token of portfolio.tokens) {\n            output += `${token.name} (${token.symbol}): ${token.uiAmount} ($${new BigNumber(token.valueUsd).toFixed(2)})\\n`;\n        }\n\n        output += \"\\nMarket Prices:\\n\";\n        output += `NEAR: $${new BigNumber(portfolio.tokens[0].priceUsd).toFixed(2)}\\n`;\n\n        return output;\n    }\n\n    async getFormattedPortfolio(): Promise<string> {\n        try {\n            const portfolio = await this.fetchPortfolioValue();\n            return this.formatPortfolio(portfolio);\n        } catch (error) {\n            console.error(\"Error generating portfolio report:\", error);\n            return \"Unable to fetch wallet information. Please try again later.\";\n        }\n    }\n}\n\nconst walletProvider = {\n    get: async (): Promise<string | null> => {\n        try {\n            const accountId = settings.accountId;\n            if (!accountId) {\n                throw new Error(\"NEAR_ADDRESS not configured\");\n            }\n            const provider = new WalletProvider(accountId);\n            return await provider.getFormattedPortfolio();\n        } catch (error) {\n            console.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    },\n};\n\n\nexport { walletProvider };"]}